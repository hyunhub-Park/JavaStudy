-------------------------------MOVIE TEST----------------------------------------
CREATE OR REPLACE PROCEDURE MOVIE_PROCEDURE (VID IN MOVIE.ID%TYPE, VMESSAGE OUT VARCHAR2)
IS
    VMOVIE_RT MOVIE%ROWTYPE;
BEGIN
-- decode or if문 작성.
    UPDATE MOVIE SET PRICE=DECODE(VID, ID, PRICE-(PRICE*0.05))
    WHERE ID=VID;
    COMMIT;
    SELECT * INTO VMOVIE_RT FROM MOVIE WHERE ID=VID;
    VMESSAGE:='ID '||VMOVIE_RT.ID||'번에 5%의 할인이 적용되어 총 '||VMOVIE_RT.PRICE||'원 입니다.';
    DBMS_OUTPUT.PUT_LINE(VMESSAGE);
END;
/

CREATE OR REPLACE PROCEDURE MOVIE_PROCEDURE2 (VID IN MOVIE.ID%TYPE)
IS
    --VMOVIE_RT MOVIE%ROWTYPE;
BEGIN
-- decode or if문 작성.
    UPDATE MOVIE SET PRICE=DECODE(VID, ID, PRICE-(PRICE*0.05))
    WHERE ID=VID;
    COMMIT;
    --SELECT * INTO VMOVIE_RT FROM MOVIE WHERE ID=VID;
    --VMESSAGE:='ID '||VMOVIE_RT.ID||'번에 5%의 할인이 적용되어 총 '||VMOVIE_RT.PRICE||'원 입니다.';
    --DBMS_OUTPUT.PUT_LINE(VMESSAGE);
END;
/



EXECUTE MOVIE_PROCEDURE(36, ????);
EXECUTE MOVIE_PROCEDURE2(36);
COMMIT;
SELECT * FROM MOVIE;

CREATE OR REPLACE FUNCTION MOVIE_FUNCTION (VID IN MOVIE.ID%TYPE)
RETURN VARCHAR2

IS
    VMOVIE_RT MOVIE%ROWTYPE;
    VMESSAGE VARCHAR2(100);
BEGIN
    -- decode or if문 작성.
    UPDATE MOVIE SET PRICE=PRICE-(PRICE*0.05) WHERE ID=VID;
    -- COMMIT;
    SELECT * INTO VMOVIE_RT FROM MOVIE WHERE ID=VID;
    VMESSAGE:='ID '||VMOVIE_RT.ID||'번에 5%의 할인이 적용되어 총 '||VMOVIE_RT.PRICE||'원 입니다.';
    RETURN VMESSAGE;
END;
/

SELECT MOVIE_FUNCTION(4) FROM DUAL;
SELECT * FROM MOVIE;

CREATE OR REPLACE TRIGGER MOVIE2_TRIGGER
BEFORE INSERT ON MOVIE2
FOR EACH ROW
BEGIN
    :NEW.PRICE := :NEW.PRICE*1.1;
END;
/

DROP TRIGGER MOVIE_TRIGGER;

CREATE TABLE MOVIE2
AS
SELECT * FROM MOVIE;

INSERT INTO MOVIE2 VALUES (MOVIE_ID_SEQ.nextval, 'Movie PQR', 'Director PQR', '2021', 20000);
COMMIT;

CREATE SEQUENCE MOVIE2_ID_SEQ
START WITH 1
INCREMENT BY 1;

SELECT * FROM MOVIE2;
DELETE MOVIE2;
COMMIT;

SELECT * FROM MOVIE2;